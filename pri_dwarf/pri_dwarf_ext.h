#ifndef __PRI_DWARF_EXT_H__
#define __PRI_DWARF_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef void(*dwarf_type_iter_t)(CPUState *env, target_ulong base_addr, LocType loc_t, DwarfVarType *var_ty, dwarfTypeCB cb, int recursion_level);
static dwarf_type_iter_t __dwarf_type_iter = NULL;
static inline void dwarf_type_iter(CPUState *env, target_ulong base_addr, LocType loc_t, DwarfVarType *var_ty, dwarfTypeCB cb, int recursion_level);
static inline void dwarf_type_iter(CPUState *env, target_ulong base_addr, LocType loc_t, DwarfVarType *var_ty, dwarfTypeCB cb, int recursion_level){
    assert(__dwarf_type_iter);
    return __dwarf_type_iter(env,base_addr,loc_t,var_ty,cb,recursion_level);
}
typedef const char *(*dwarf_type_to_string_t)(DwarfVarType *var_ty);
static dwarf_type_to_string_t __dwarf_type_to_string = NULL;
static inline const char * dwarf_type_to_string(DwarfVarType *var_ty);
static inline const char * dwarf_type_to_string(DwarfVarType *var_ty){
    assert(__dwarf_type_to_string);
    return __dwarf_type_to_string(var_ty);
}
#define API_PLUGIN_NAME "pri_dwarf"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
static inline bool init_pri_dwarf_api(void);static inline bool init_pri_dwarf_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, dwarf_type_iter)
IMPORT_PPP(module, dwarf_type_to_string)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
