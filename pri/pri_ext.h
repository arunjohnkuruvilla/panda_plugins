#ifndef __PRI_EXT_H__
#define __PRI_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef int(*pri_get_pc_source_info_t)(CPUState *env, target_ulong pc, SrcInfo *info);
static pri_get_pc_source_info_t __pri_get_pc_source_info = NULL;
static inline int pri_get_pc_source_info(CPUState *env, target_ulong pc, SrcInfo *info);
static inline int pri_get_pc_source_info(CPUState *env, target_ulong pc, SrcInfo *info){
    assert(__pri_get_pc_source_info);
    return __pri_get_pc_source_info(env,pc,info);
}
typedef char *(*pri_get_vma_symbol_t)(CPUState *env, target_ulong pc, target_ulong vma);
static pri_get_vma_symbol_t __pri_get_vma_symbol = NULL;
static inline char * pri_get_vma_symbol(CPUState *env, target_ulong pc, target_ulong vma);
static inline char * pri_get_vma_symbol(CPUState *env, target_ulong pc, target_ulong vma){
    assert(__pri_get_vma_symbol);
    return __pri_get_vma_symbol(env,pc,vma);
}
typedef void(*pri_all_livevar_iter_t)(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static pri_all_livevar_iter_t __pri_all_livevar_iter = NULL;
static inline void pri_all_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static inline void pri_all_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args){
    assert(__pri_all_livevar_iter);
    return __pri_all_livevar_iter(env,pc,f,args);
}
typedef void(*pri_funct_livevar_iter_t)(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static pri_funct_livevar_iter_t __pri_funct_livevar_iter = NULL;
static inline void pri_funct_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static inline void pri_funct_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args){
    assert(__pri_funct_livevar_iter);
    return __pri_funct_livevar_iter(env,pc,f,args);
}
typedef void(*pri_global_livevar_iter_t)(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static pri_global_livevar_iter_t __pri_global_livevar_iter = NULL;
static inline void pri_global_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static inline void pri_global_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args){
    assert(__pri_global_livevar_iter);
    return __pri_global_livevar_iter(env,pc,f,args);
}
typedef void(*pri_runcb_on_before_line_change_t)(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static pri_runcb_on_before_line_change_t __pri_runcb_on_before_line_change = NULL;
static inline void pri_runcb_on_before_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static inline void pri_runcb_on_before_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno){
    assert(__pri_runcb_on_before_line_change);
    return __pri_runcb_on_before_line_change(env,pc,file_name,funct_name,lno);
}
typedef void(*pri_runcb_on_after_line_change_t)(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static pri_runcb_on_after_line_change_t __pri_runcb_on_after_line_change = NULL;
static inline void pri_runcb_on_after_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static inline void pri_runcb_on_after_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno){
    assert(__pri_runcb_on_after_line_change);
    return __pri_runcb_on_after_line_change(env,pc,file_name,funct_name,lno);
}
typedef void(*pri_runcb_on_fn_start_t)(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static pri_runcb_on_fn_start_t __pri_runcb_on_fn_start = NULL;
static inline void pri_runcb_on_fn_start(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static inline void pri_runcb_on_fn_start(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno){
    assert(__pri_runcb_on_fn_start);
    return __pri_runcb_on_fn_start(env,pc,file_name,funct_name,lno);
}
#define API_PLUGIN_NAME "pri"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}
static inline bool init_pri_api(void);static inline bool init_pri_api(void){
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
IMPORT_PPP(module, pri_get_pc_source_info)
IMPORT_PPP(module, pri_get_vma_symbol)
IMPORT_PPP(module, pri_all_livevar_iter)
IMPORT_PPP(module, pri_funct_livevar_iter)
IMPORT_PPP(module, pri_global_livevar_iter)
IMPORT_PPP(module, pri_runcb_on_before_line_change)
IMPORT_PPP(module, pri_runcb_on_after_line_change)
IMPORT_PPP(module, pri_runcb_on_fn_start)
return true;
}

#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
